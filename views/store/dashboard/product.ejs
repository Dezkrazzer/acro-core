<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acro Network Admin Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: "#1E293B", // Dark gray
                        secondary: "#7DD3FC", // Light blue
                    },
                    boxShadow: {
                        'custom-light': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
                        'custom-lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
                    }
                },
            },
        };
    </script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha512-..." crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 font-sans antialiased text-gray-800">
    <div class="flex h-screen overflow-hidden">
        <aside id="sidebar" class="fixed inset-y-0 left-0 z-50 w-64 bg-primary text-white transform -translate-x-full transition-transform duration-300 ease-in-out md:relative md:translate-x-0 md:flex-shrink-0 p-4 flex flex-col justify-between">
            <div>
                <div class="text-3xl font-extrabold text-center mb-10 mt-4 tracking-wider">Acro Network</div>
                <nav class="space-y-3">
                    <a href="/admin/store" class="flex items-center space-x-3 py-3 px-4 rounded-lg hover:bg-secondary hover:text-primary transition duration-200 group">
                        <i class="fas fa-tachometer-alt text-xl group-hover:text-primary"></i>
                        <span class="text-lg">Dashboard</span>
                    </a>
                    <a href="/admin/store/product" class="flex items-center space-x-3 py-3 px-4 rounded-lg bg-secondary hover:text-primary transition duration-200 group">
                        <i class="fas fa-box text-xl group-hover:text-primary"></i>
                        <span class="text-lg">Produk</span>
                    </a>
                    <a href="#" class="flex items-center space-x-3 py-3 px-4 rounded-lg hover:bg-secondary hover:text-primary transition duration-200 group">
                        <i class="fas fa-shopping-cart text-xl group-hover:text-primary"></i>
                        <span class="text-lg">Pesanan</span>
                    </a>
                    <a href="#" class="flex items-center space-x-3 py-3 px-4 rounded-lg hover:bg-secondary hover:text-primary transition duration-200 group">
                        <i class="fas fa-users text-xl group-hover:text-primary"></i>
                        <span class="text-lg">Pelanggan</span>
                    </a>
                    <a href="#" class="flex items-center space-x-3 py-3 px-4 rounded-lg hover:bg-secondary hover:text-primary transition duration-200 group">
                        <i class="fas fa-cog text-xl group-hover:text-primary"></i>
                        <span class="text-lg">Pengaturan</span>
                    </a>
                </nav>
            </div>
            <div class="p-4 border-t border-gray-700 text-sm">
                <p>Logged in as: <span class="font-semibold">
                        <%= req.user ? req.user.username : 'Login' %>
                    </span></p>
                <a href="/auth/logout" class="text-secondary hover:underline">Logout</a>
            </div>
        </aside>
        <div id="sidebar-overlay" class="fixed inset-0 bg-black opacity-50 z-40 hidden md:hidden"></div>
        <div class="flex-1 flex flex-col overflow-y-auto">
            <header class="bg-gray-900 border-b border-gray-800 p-4 md:px-6 flex justify-between items-center z-30">
                <button id="sidebar-toggle" class="md:hidden text-gray-600 focus:outline-none">
                    <i class="fas fa-bars text-2xl"></i>
                </button>
                <h1 class="text-2xl font-bold text-white flex-grow text-center md:text-left">Dashboard</h1>
                <div class="relative">
                    <button class="flex items-center text-white focus:outline-none space-x-2">
                        <span class="hidden md:block">Halo, <%= req.user ? req.user.username : 'Please login' %>!</span>
                        <i class="fas fa-user-circle text-2xl"></i>
                    </button>
                </div>
            </header>
            <main class="flex-1 bg-gray-900 p-4 md:p-6">
                <div class="bg-gray-800 p-6 rounded-xl shadow-custom-lg mb-8">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold text-white">Stars Point</h2>
                        <button id="addStarsPointBtn" class="bg-secondary text-primary px-5 py-2 rounded-md font-semibold hover:bg-opacity-80 transition duration-200 flex items-center space-x-2">
                            <i class="fas fa-plus"></i>
                            <span>Tambah Stars Point Baru</span>
                        </button>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200 mb-10" id="starsPointTable">
                            <thead class="bg-gray-900">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Product ID</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Jumlah Stars</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Bonus Stars</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Harga</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Aksi</th>
                                </tr>
                            </thead>
                            <tbody class="bg-gray-800 divide-y divide-gray-200">
                                <% starsPoints.forEach(product=> { %> <tr class="hover:bg-gray-700 transition duration-150">
                                        <td class="px-6 py-4 whitespace-nowrap font-medium text-white">
                                            <%= product.productID %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">
                                            <%= product.starsAmount %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">
                                            <%= product.starsBonus %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">Rp <%= product.price.toLocaleString('id-ID') %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                            <a href="#" class="text-blue-600 hover:text-blue-900 mr-3 edit-stars-point-btn" data-id="<%= product._id %>">Edit</a>
                                            <a href="#" class="text-red-600 hover:text-red-900 delete-stars-point-btn" data-id="<%= product._id %>">Hapus</a>
                                        </td>
                                    </tr>
                                    <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="bg-gray-800 p-6 rounded-xl shadow-custom-lg">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold text-white">Server Hosting</h2>
                        <button id="addServerHostingBtn" class="bg-secondary text-primary px-5 py-2 rounded-md font-semibold hover:bg-opacity-80 transition duration-200 flex items-center space-x-2">
                            <i class="fas fa-plus"></i>
                            <span>Tambah Hosting Baru</span>
                        </button>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200" id="serverHostingTable">
                            <thead class="bg-gray-900">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Product ID</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Nama Produk</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Lokasi</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">RAM</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">CPU</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Penyimpanan</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Harga</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-semibold text-white uppercase tracking-wider">Aksi</th>
                                </tr>
                            </thead>
                            <tbody class="bg-gray-800 divide-y divide-gray-200">
                                <% serverHostings.forEach(product=> { %> <tr class="hover:bg-gray-700 transition duration-150">
                                        <td class="px-6 py-4 whitespace-nowrap font-medium text-white">
                                            <%= product.productID %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">
                                            <%= product.productName %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">
                                            <%= product.location %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">
                                            <%= product.amountRAM %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">
                                            <%= product.amountCPU %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">
                                            <%= product.amountStorage %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-white">Rp <%= product.price.toLocaleString('id-ID') %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                            <a href="#" class="text-blue-600 hover:text-blue-900 mr-3 edit-server-hosting-btn" data-id="<%= product._id %>">Edit</a>
                                            <a href="#" class="text-red-600 hover:text-red-900 delete-server-hosting-btn" data-id="<%= product._id %>">Hapus</a>
                                        </td>
                                    </tr>
                                    <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </main>
        </div>
    </div>
    <script>
        // JavaScript for Sidebar Toggle (Mobile)
        const sidebarToggle = document.getElementById('sidebar-toggle');
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebar-overlay');

        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('-translate-x-full');
            sidebarOverlay.classList.toggle('hidden');
        });

        sidebarOverlay.addEventListener('click', () => {
            sidebar.classList.add('-translate-x-full');
            sidebarOverlay.classList.add('hidden');
        });

        // --- SweetAlert2 for Stars Point Products ---
        const starsPointTableBody = document.querySelector('#starsPointTable tbody');
        const addStarsPointBtn = document.getElementById('addStarsPointBtn');

        // Function to render Stars Point table (call this after CRUD operations)
        async function renderStarsPoints() {
            const response = await fetch('/api/stars-points');
            const products = await response.json();
            starsPointTableBody.innerHTML = ''; // Clear existing rows
            products.forEach(product => {
                const row = `
                    <tr class="hover:bg-gray-700 transition duration-150">
                        <td class="px-6 py-4 whitespace-nowrap font-medium text-white">${product.productID}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">${product.starsAmount}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">${product.starsBonus}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">Rp ${product.price.toLocaleString('id-ID')}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <a href="#" class="text-blue-600 hover:text-blue-900 mr-3 edit-stars-point-btn" data-id="${product._id}">Edit</a>
                            <a href="#" class="text-red-600 hover:text-red-900 delete-stars-point-btn" data-id="${product._id}">Hapus</a>
                        </td>
                    </tr>
                `;
                starsPointTableBody.insertAdjacentHTML('beforeend', row);
            });
            attachStarsPointEventListeners(); // Re-attach event listeners after re-rendering
        }

        // Add Stars Point
        addStarsPointBtn.addEventListener('click', async () => {
            const { value: formValues } = await Swal.fire({
                title: 'Tambah Stars Point Baru',
                html:
                    '<input id="swal-product-id" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Product ID">' +
                    '<input id="swal-stars-amount" type="number" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Jumlah Stars">' +
                    '<input id="swal-stars-bonus" type="number" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Bonus Stars (opsional, default 0)">' +
                    '<input id="swal-price" type="number" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Harga (Rp)">',
                focusConfirm: false,
                preConfirm: () => {
                    return {
                        productID: document.getElementById('swal-product-id').value,
                        starsAmount: parseInt(document.getElementById('swal-stars-amount').value),
                        starsBonus: parseInt(document.getElementById('swal-stars-bonus').value || '0'),
                        price: parseFloat(document.getElementById('swal-price').value),
                    };
                },
                showCancelButton: true,
                confirmButtonText: 'Simpan',
                cancelButtonText: 'Batal',
                customClass: {
                    popup: 'bg-gray-800 text-white',
                    title: 'text-white',
                    confirmButton: 'bg-secondary text-primary',
                    cancelButton: 'bg-gray-600 text-white',
                }
            });

            if (formValues) {
                try {
                    const response = await fetch('/api/stars-points', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formValues)
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire('Berhasil!', result.message, 'success');
                        renderStarsPoints(); // Re-render the table
                    } else {
                        const errorMessage = result.error || result.details || 'Gagal memperbarui Stars Point.';
                        Swal.fire('Error!', errorMessage, 'error');
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    Swal.fire('Error!', 'Terjadi kesalahan jaringan.', 'error');
                }
            }
        });

        // Edit Stars Point and Delete Stars Point logic (using event delegation)
        function attachStarsPointEventListeners() {
            starsPointTableBody.querySelectorAll('.edit-stars-point-btn').forEach(button => {
                button.removeEventListener('click', handleEditStarsPoint); // Prevent duplicate listeners
                button.addEventListener('click', handleEditStarsPoint);
            });

            starsPointTableBody.querySelectorAll('.delete-stars-point-btn').forEach(button => {
                button.removeEventListener('click', handleDeleteStarsPoint); // Prevent duplicate listeners
                button.addEventListener('click', handleDeleteStarsPoint);
            });
        }

        async function handleEditStarsPoint(event) {
            event.preventDefault();
            const id = event.target.dataset.id;

            try {
                const response = await fetch(`/api/stars-points/${id}`);
                if (!response.ok) { // Jika respons bukan OK (misal 404, 500)
                    const errorData = await response.json().catch(() => ({ error: 'Unknown error fetching data.' })); // Coba parse JSON, kalau gagal berarti HTML
                    throw new Error(errorData.error || `Server responded with status ${response.status}`);
                }
                const product = await response.json();

                const { value: formValues } = await Swal.fire({
                    title: 'Edit Stars Point',
                    html:
                        `<input id="swal-product-id" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Product ID" value="${product.productID}">` +
                        `<input id="swal-stars-amount" type="number" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Jumlah Stars" value="${product.starsAmount}">` +
                        `<input id="swal-stars-bonus" type="number" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Bonus Stars" value="${product.starsBonus}">` +
                        `<input id="swal-price" type="number" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Harga (Rp)" value="${product.price}">`,
                    focusConfirm: false,
                    preConfirm: () => {
                        return {
                            productID: document.getElementById('swal-product-id').value,
                            starsAmount: parseInt(document.getElementById('swal-stars-amount').value),
                            starsBonus: parseInt(document.getElementById('swal-stars-bonus').value || '0'),
                            price: parseFloat(document.getElementById('swal-price').value),
                        };
                    },
                    showCancelButton: true,
                    confirmButtonText: 'Update',
                    cancelButtonText: 'Batal',
                    customClass: {
                        popup: 'bg-gray-800 text-white',
                        title: 'text-white',
                        confirmButton: 'bg-secondary text-primary',
                        cancelButton: 'bg-gray-600 text-white',
                    }
                });

                if (formValues) {
                    const updateResponse = await fetch(`/api/stars-points/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formValues)
                    });

                    // Selalu coba parse JSON, bahkan jika response.ok adalah false
                    let updateResult;
                    try {
                        updateResult = await updateResponse.json();
                    } catch (jsonError) {
                        // Jika gagal parse JSON, berarti responsnya HTML
                        console.error('Failed to parse JSON response from PUT request. Server might have sent HTML error page.', jsonError);
                        Swal.fire('Error!', 'Server mengembalikan respons yang tidak valid (HTML). Silakan periksa log server.', 'error');
                        return; // Hentikan eksekusi
                    }

                    if (updateResponse.ok) {
                        Swal.fire('Berhasil!', updateResult.message, 'success');
                        renderStarsPoints();
                    } else {
                        // Gunakan updateResult.error atau updateResult.details jika tersedia
                        const errorMessage = updateResult.error || updateResult.details || 'Gagal memperbarui Stars Point.';
                        Swal.fire('Error!', errorMessage, 'error');
                    }
                }
            } catch (error) {
                console.error('Fetch error:', error);
                Swal.fire('Error!', 'Terjadi kesalahan saat mengambil atau memperbarui data.', 'error');
            }
        }

        async function handleDeleteStarsPoint(event) {
            event.preventDefault();
            const id = event.target.dataset.id;

            const { isConfirmed } = await Swal.fire({
                title: 'Apakah Anda yakin?',
                text: "Produk ini akan dihapus secara permanen!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#DC2626',
                cancelButtonColor: '#6B7280',
                confirmButtonText: 'Ya, hapus!',
                cancelButtonText: 'Batal',
                customClass: {
                    popup: 'bg-gray-800 text-white',
                    title: 'text-white',
                    confirmButton: 'bg-red-600 text-white',
                    cancelButton: 'bg-gray-600 text-white',
                }
            });

            if (isConfirmed) {
                try {
                    const response = await fetch(`/api/stars-points/${id}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire('Terhapus!', result.message, 'success');
                        renderStarsPoints(); // Re-render the table
                    } else {
                        Swal.fire('Error!', result.error || 'Gagal menghapus Stars Point.', 'error');
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    Swal.fire('Error!', 'Terjadi kesalahan jaringan.', 'error');
                }
            }
        }


        // --- SweetAlert2 for Server Hosting Products ---
        const serverHostingTableBody = document.querySelector('#serverHostingTable tbody');
        const addServerHostingBtn = document.getElementById('addServerHostingBtn');

        // Function to render Server Hosting table (call this after CRUD operations)
        async function renderServerHostings() {
            const response = await fetch('/api/server-hosting');
            const products = await response.json();
            serverHostingTableBody.innerHTML = ''; // Clear existing rows
            products.forEach(product => {
                const row = `
                    <tr class="hover:bg-gray-700 transition duration-150">
                        <td class="px-6 py-4 whitespace-nowrap font-medium text-white">${product.productID}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">${product.productName}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">${product.location}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">${product.amountRAM}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">${product.amountCPU}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">${product.amountStorage}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-white">Rp ${product.price.toLocaleString('id-ID')}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <a href="#" class="text-blue-600 hover:text-blue-900 mr-3 edit-server-hosting-btn" data-id="${product._id}">Edit</a>
                            <a href="#" class="text-red-600 hover:text-red-900 delete-server-hosting-btn" data-id="${product._id}">Hapus</a>
                        </td>
                    </tr>
                `;
                serverHostingTableBody.insertAdjacentHTML('beforeend', row);
            });
            attachServerHostingEventListeners(); // Re-attach event listeners after re-rendering
        }

        // Add Server Hosting
        addServerHostingBtn.addEventListener('click', async () => {
            const { value: formValues } = await Swal.fire({
                title: 'Tambah Server Hosting Baru',
                html:
                    '<input id="swal-hosting-product-id" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Product ID">' +
                    '<input id="swal-hosting-product-name" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Nama Produk">' +
                    '<select id="swal-hosting-location" class="swal2-input bg-gray-700 text-white border-gray-600">' +
                    '<option value="Singapore">Singapore</option>' +
                    '<option value="Indonesia">Indonesia</option>' +
                    '</select>' +
                    '<input id="swal-hosting-ram" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Jumlah RAM (e.g., 2GB)">' +
                    '<input id="swal-hosting-cpu" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Jumlah CPU (e.g., 2 Core)">' +
                    '<input id="swal-hosting-storage" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Jumlah Penyimpanan (e.g., 50GB)">' +
                    '<input id="swal-hosting-price" type="number" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Harga (Rp)">',
                focusConfirm: false,
                preConfirm: () => {
                    return {
                        productID: document.getElementById('swal-hosting-product-id').value,
                        productName: document.getElementById('swal-hosting-product-name').value,
                        location: document.getElementById('swal-hosting-location').value,
                        amountRAM: document.getElementById('swal-hosting-ram').value,
                        amountCPU: document.getElementById('swal-hosting-cpu').value,
                        amountStorage: document.getElementById('swal-hosting-storage').value,
                        price: parseFloat(document.getElementById('swal-hosting-price').value),
                    };
                },
                showCancelButton: true,
                confirmButtonText: 'Simpan',
                cancelButtonText: 'Batal',
                customClass: {
                    popup: 'bg-gray-800 text-white',
                    title: 'text-white',
                    confirmButton: 'bg-secondary text-primary',
                    cancelButton: 'bg-gray-600 text-white',
                }
            });

            if (formValues) {
                try {
                    const response = await fetch('/api/server-hosting', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formValues)
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire('Berhasil!', result.message, 'success');
                        renderServerHostings(); // Re-render the table
                    } else {
                        Swal.fire('Error!', result.error || 'Gagal menambahkan Server Hosting.', 'error');
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    Swal.fire('Error!', 'Terjadi kesalahan jaringan.', 'error');
                }
            }
        });

        // Edit Server Hosting and Delete Server Hosting logic (using event delegation)
        function attachServerHostingEventListeners() {
            serverHostingTableBody.querySelectorAll('.edit-server-hosting-btn').forEach(button => {
                button.removeEventListener('click', handleEditServerHosting); // Prevent duplicate listeners
                button.addEventListener('click', handleEditServerHosting);
            });

            serverHostingTableBody.querySelectorAll('.delete-server-hosting-btn').forEach(button => {
                button.removeEventListener('click', handleDeleteServerHosting); // Prevent duplicate listeners
                button.addEventListener('click', handleDeleteServerHosting);
            });
        }

        async function handleEditServerHosting(event) {
            event.preventDefault();
            const id = event.target.dataset.id;
            console.log('Attempting to edit Server Hosting with ID:', id);

            try {
                // --- TAHAP 1: Mengambil data awal ---
                const response = await fetch(`/api/server-hosting/${id}`);
                console.log('GET /api/server-hosting/:id response status:', response.status);

                if (!response.ok) {
                    // Coba parse JSON, tapi tangani jika respons bukan JSON (HTML)
                    let errorData;
                    try {
                        errorData = await response.json();
                    } catch (jsonError) {
                        console.error('Failed to parse JSON for GET request. Server might have sent HTML error page.', jsonError);
                        Swal.fire('Error!', 'Terjadi kesalahan saat mengambil data awal. Server mengembalikan respons tidak valid.', 'error');
                        return; // Hentikan eksekusi
                    }
                    throw new Error(errorData.error || `Server responded with status ${response.status}`);
                }
                const product = await response.json();
                console.log('Initial Server Hosting data received:', product);

                // --- TAHAP 2: Menampilkan SweetAlert dan mengambil input pengguna ---
                const { value: formValues } = await Swal.fire({
                    title: 'Edit Server Hosting',
                    html:
                        `<input id="swal-hosting-product-id" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Product ID" value="${product.productID || ''}">` +
                        `<input id="swal-hosting-product-name" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Nama Produk" value="${product.productName || ''}">` +
                        `<input id="swal-hosting-location" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Lokasi" value="${product.location || ''}">` +
                        `<input id="swal-hosting-ram" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Jumlah RAM (e.g., 2GB)" value="${product.amountRAM || ''}">` +
                        `<input id="swal-hosting-cpu" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Jumlah CPU (e.g., 2 Core)" value="${product.amountCPU || ''}">` +
                        `<input id="swal-hosting-storage" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Jumlah Penyimpanan (e.g., 50GB)" value="${product.amountStorage || ''}">` +
                        `<input id="swal-hosting-price" type="number" class="swal2-input bg-gray-700 text-white border-gray-600" placeholder="Harga (Rp)" value="${product.price || ''}">`,
                    focusConfirm: false,
                    preConfirm: () => {
                        const priceValue = parseFloat(document.getElementById('swal-hosting-price').value);

                        // Tambahkan validasi frontend dasar
                        if (isNaN(priceValue)) {
                            Swal.showValidationMessage('Harga harus berupa angka.');
                            return false; // Mencegah dialog tertutup
                        }

                        return {
                            productID: document.getElementById('swal-hosting-product-id').value,
                            productName: document.getElementById('swal-hosting-product-name').value,
                            location: document.getElementById('swal-hosting-location').value,
                            amountRAM: document.getElementById('swal-hosting-ram').value,
                            amountCPU: document.getElementById('swal-hosting-cpu').value,
                            amountStorage: document.getElementById('swal-hosting-storage').value,
                            price: priceValue,
                        };
                    },
                    showCancelButton: true,
                    confirmButtonText: 'Update',
                    cancelButtonText: 'Batal',
                    customClass: {
                        popup: 'bg-gray-800 text-white',
                        title: 'text-white',
                        confirmButton: 'bg-secondary text-primary',
                        cancelButton: 'bg-gray-600 text-white',
                    }
                });

                // --- TAHAP 3: Mengirim data pembaruan (jika formValues ada) ---
                if (formValues) {
                    console.log('Sending update data:', formValues);
                    const updateResponse = await fetch(`/api/server-hosting/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formValues)
                    });
                    console.log('PUT /api/server-hosting/:id response status:', updateResponse.status);

                    // Selalu coba parse JSON, bahkan jika response.ok adalah false
                    let updateResult;
                    try {
                        updateResult = await updateResponse.json();
                    } catch (jsonError) {
                        console.error('Failed to parse JSON response from PUT request. Server might have sent HTML error page.', jsonError);
                        Swal.fire('Error!', 'Server mengembalikan respons yang tidak valid (HTML). Silakan periksa log server.', 'error');
                        return; // Hentikan eksekusi
                    }

                    if (updateResponse.ok) {
                        Swal.fire('Berhasil!', updateResult.message, 'success');
                        renderServerHostings(); // Re-render the table
                    } else {
                        // Gunakan updateResult.error atau updateResult.details jika tersedia
                        const errorMessage = updateResult.error || updateResult.details || 'Gagal memperbarui Server Hosting.';
                        Swal.fire('Error!', errorMessage, 'error');
                    }
                }
            } catch (error) {
                console.error('Caught unexpected error in handleEditServerHosting:', error);
                Swal.fire('Error!', 'Terjadi kesalahan saat mengambil atau memperbarui data. ' + error.message, 'error');
            }
        }

        async function handleDeleteServerHosting(event) {
            event.preventDefault();
            const id = event.target.dataset.id;

            const { isConfirmed } = await Swal.fire({
                title: 'Apakah Anda yakin?',
                text: "Produk ini akan dihapus secara permanen!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#DC2626',
                cancelButtonColor: '#6B7280',
                confirmButtonText: 'Ya, hapus!',
                cancelButtonText: 'Batal',
                customClass: {
                    popup: 'bg-gray-800 text-white',
                    title: 'text-white',
                    confirmButton: 'bg-red-600 text-white',
                    cancelButton: 'bg-gray-600 text-white',
                }
            });

            if (isConfirmed) {
                try {
                    const response = await fetch(`/api/server-hosting/${id}`, {
                        method: 'DELETE'
                    });
                    const result = await response.json();
                    if (response.ok) {
                        Swal.fire('Terhapus!', result.message, 'success');
                        renderServerHostings(); // Re-render the table
                    } else {
                        Swal.fire('Error!', result.error || 'Gagal menghapus Server Hosting.', 'error');
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    Swal.fire('Error!', 'Terjadi kesalahan jaringan.', 'error');
                }
            }
        }

        // Initial render on page load
        document.addEventListener('DOMContentLoaded', () => {
            renderStarsPoints();
            renderServerHostings();
        });
    </script>
</body>
</html>